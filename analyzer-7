import cv2
import numpy as np

def extract_documents(image_path):
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    edges = cv2.Canny(blurred, 50, 150)

    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    documents = []

    for cnt in contours:
        approx = cv2.approxPolyDP(cnt, 0.02 * cv2.arcLength(cnt, True), True)
        if len(approx) == 4 and cv2.contourArea(cnt) > 10000:
            x, y, w, h = cv2.boundingRect(cnt)
            doc = image[y:y+h, x:x+w]
            documents.append(doc)

    return documents

def dominant_color(image):
    pixels = image.reshape(-1, 3)
    avg_color = np.mean(pixels, axis=0)
    return avg_color

def texture_score(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    sobel = cv2.Sobel(gray, cv2.CV_64F, 1, 1, ksize=5)
    return np.mean(np.abs(sobel))

def compare_documents(doc1, doc2):
    color1 = dominant_color(doc1)
    color2 = dominant_color(doc2)
    color_diff = np.linalg.norm(color1 - color2)

    texture1 = texture_score(doc1)
    texture2 = texture_score(doc2)
    texture_diff = abs(texture1 - texture2)

    # تحويل الفروقات إلى نسبة تشابه
    color_similarity = max(0, 100 - color_diff)
    texture_similarity = max(0, 100 - texture_diff)

    final_score = (color_similarity + texture_similarity) / 2
    return round(final_score, 2)

def analyzer_7(image_path):
    docs = extract_documents(image_path)
    if len(docs) < 2:
        return "لم يتم العثور على مستندين على الأقل للمقارنة."

    score = compare_documents(docs[0], docs[1])
    return f"نسبة التشابه بين أول مستندين: {score}%"

# مثال استخدام
# result = analyzer_7('your_image.jpg')
# print(result)
